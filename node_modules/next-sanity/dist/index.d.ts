import type {ClientConfig as ClientConfig_2} from '@sanity/client'
import type {Config} from '@sanity/groq-store/dist/typings/types'
import {default as groq} from 'groq'
import type {SanityClient as SanityClient_2} from '@sanity/client'

export declare type Aborter = Aborter_2

declare interface Aborter_2 {
  abort(): void
  signal: AbortSignal
}

export declare type ClientConfig = ClientConfig_2

export declare function createClient(config: ClientConfig_2): SanityClient_2

export declare function createCurrentUserHook({
  projectId,
}: {
  projectId: string
  dataset?: string
}): () => {
  data: CurrentUser | null | undefined
  error: Error | undefined
  loading: boolean
}

export declare function createPreviewSubscriptionHook({
  projectId,
  dataset,
  token,
  EventSource,
  documentLimit,
}: ProjectConfig & {
  documentLimit?: number
}): <R = any>(
  query: string,
  options?: SubscriptionOptions<R>
) => {
  data: R
  loading: boolean
  error: Error | undefined
}

export declare interface CurrentUser {
  id: string
  name: string
  profileImage?: string
}

export {groq}

export declare type GroqStoreEventSource = Config['EventSource']

declare type Params = Record<string, unknown>

export declare interface ProjectConfig {
  projectId: string
  dataset: string
  token?: string
  /** Must be provided when token is used in browser, as native EventSource does not support auth-headers. */
  EventSource?: GroqStoreEventSource
}

export declare type SanityClient = SanityClient_2

declare interface SubscriptionOptions<R = any> {
  enabled?: boolean
  params?: Params
  initialData?: R
}

export {}
